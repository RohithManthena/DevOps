
•	The mentioned architecture model is a basic web application model. 

The CDN is used to deliver the content to end-users(clients) to reduce the latency and reduce the load on application servers. 
Then for requests that are not cached by the CDN, they are processed by the Load Balancer which distributes the traffic among the application servers. The aplication servers then send responses to the client.

Benefits:
– The use of CDN will reduce the latency of the responses of the contents that can be cached. We used Akamai CDN in our previos ecommerce project.
- The use of Load balancer will help handling the application server failures and will also give an increased scalability. 
  The use of two load balancers is also to handle failures and increase the availability of the application.
  When a load balancer goes down the other load balancer can handle all the traffic until the failed one is restored.
 
 
 •	How do you roll out an update to the service without any downtime impact to the app foo.com
 
 First I would make sure to do this activity on a day/time when less customer traffic is expected. Then, will route all the traffic to one service using the CDN. 
 Now, I can roll an update to the service that is not taking any traffic. After the update is completed I will start moving the traffic from 5% and increase it to 100 if everything is stable.
 Once all the traffic is moved to the service that has the new update, I will update the other service and then again move the traffic between services 50-50 if no issues are found. 
 This way we have one service always to serve the customers without downtime.
 
 •	If you have to deploy this App to the Cloud what services would you use and explain the Architecture.
 
 AWS:
 If I have to deploy this in cloud this would me my architecture.
 Route 53 ---------> Elastic load balancer ------------> EC2 instances in an Auto scaling group spread across multiple AZ. For CDN I will use aws CloudFront. 
